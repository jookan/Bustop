import sqlite3
from tkinter import Tk, Label, Entry, Button, StringVar, messagebox

# ----------------------------------------
# SQLite 데이터베이스 관련 함수들
# ----------------------------------------

DATABASE_FILE = "your_database.db"

def initialize_database():
    """
    데이터베이스를 초기화하고, 기본 데이터를 삽입.
    """
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()

    # 테이블 생성
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS driver (
            idx INTEGER PRIMARY KEY,      -- 고유 ID
            name TEXT NOT NULL,           -- 이름
            score INTEGER DEFAULT 100,    -- 점수
            vc_num TEXT DEFAULT NULL      -- 차량 번호
        )
    ''')

    # 초기 데이터 삽입
    data = [
        (1, '이주환', 100, '62라1234'),
        (2, '김상우', 90, '11가5678'),
        (3, '박철수', 85, '33다9999')
    ]

    for record in data:
        cursor.execute('''
            INSERT OR IGNORE INTO driver (idx, name, score, vc_num)
            VALUES (?, ?, ?, ?)
        ''', record)

    conn.commit()
    conn.close()
    print("Database initialized with default data.")


def show_current_data():
    """
    데이터베이스의 현재 데이터를 출력.
    """
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM driver")
    rows = cursor.fetchall()

    print("Current data in the database:")
    for row in rows:
        print(row)

    conn.close()


def update_driver_table_with_opencv(conn, data_to_update, opencv_signal):
    """
    OpenCV 신호에 따라 driver 테이블의 점수를 1씩 감소시키는 함수.

    Parameters:
        conn (sqlite3.Connection): SQLite 데이터베이스 연결 객체
        data_to_update (list of tuples): 업데이트할 데이터 목록. 
                                         각 항목은 (idx, name) 형식.
        opencv_signal (int): OpenCV로부터 전달된 값 (1일 경우 점수 감소).
    """
    try:
        cursor = conn.cursor()
        
        if opencv_signal == 1:  # OpenCV에서 1이 수신된 경우
            for row in data_to_update:
                idx, name = row[:2]
                cursor.execute("SELECT score FROM driver WHERE idx = ? AND name = ?", (idx, name))
                result = cursor.fetchone()

                if result is None:
                    print(f"Warning: No data found for idx={idx}, name={name}")
                    continue

                current_score = result[0]
                new_score = current_score - 1

                cursor.execute("""
                    UPDATE driver
                    SET score = ?
                    WHERE idx = ? AND name = ?
                """, (new_score, idx, name))
                print(f"Updated idx={idx}, name={name}, score={new_score}")

            conn.commit()
            print("Committing changes...")

        else:
            print("OpenCV signal is not 1. No updates performed.")

    except sqlite3.Error as e:
        print("데이터베이스 오류:", e)

    finally:
        cursor.close()

# ----------------------------------------
# Tkinter 로그인 관련 함수들
# ----------------------------------------

def handle_login():
    """
    사용자가 입력한 idx와 name으로 로그인 처리.
    성공 시 data_to_update에 사용자 정보를 추가하고 창을 종료.
    """
    global data_to_update
    idx = idx_var.get().strip()
    name = name_var.get().strip()

    if not idx.isdigit():
        messagebox.showerror("Error", "idx는 숫자여야 합니다.")
        return

    idx = int(idx)  # 문자열을 정수로 변환
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()

    # 사용자 확인
    cursor.execute("SELECT * FROM driver WHERE idx = ? AND name = ?", (idx, name))
    user = cursor.fetchone()

    if user:
        # 로그인 성공
        messagebox.showinfo("Success", f"로그인 성공: {name}")
        data_to_update = [(idx, name)]
        print(f"data_to_update: {data_to_update}")
        root.destroy()
    else:
        # 로그인 실패
        messagebox.showerror("Error", "로그인 실패: idx 또는 이름이 잘못되었습니다.")

    conn.close()

# ----------------------------------------
# Tkinter GUI 설정
# ----------------------------------------

def create_login_gui():
    """
    Tkinter 기반 로그인 GUI 생성.
    """
    global root, idx_var, name_var
    root = Tk()
    root.title("Driver Login")

    Label(root, text="기사님 번호 (idx):").grid(row=0, column=0, padx=10, pady=5)
    idx_var = StringVar()
    Entry(root, textvariable=idx_var).grid(row=0, column=1, padx=10, pady=5)

    Label(root, text="기사님 이름 (name):").grid(row=1, column=0, padx=10, pady=5)
    name_var = StringVar()
    Entry(root, textvariable=name_var).grid(row=1, column=1, padx=10, pady=5)

    Button(root, text="로그인", command=handle_login).grid(row=2, column=0, columnspan=2, pady=10)

    root.mainloop()

# ----------------------------------------
# 메인 실행
# ----------------------------------------

if __name__ == "__main__":
    # 데이터베이스 초기화
    initialize_database()
    show_current_data()

    # Tkinter GUI 실행
    create_login_gui()

    # OpenCV 신호 처리
    conn = sqlite3.connect(DATABASE_FILE)
    opencv_signal = 1
    update_driver_table_with_opencv(conn, data_to_update, opencv_signal)
    conn.close()
