import sqlite3
import cv2
import serial
import time


# 데이터베이스 연결
conn = sqlite3.connect('your_database.db')
c = conn.cursor()


def update_driver_table_with_opencv(conn, data_to_update, opencv_signal):
    """
    OpenCV 신호에 따라 driver 테이블의 점수를 1씩 감소시키는 함수.

    Parameters:
        conn (sqlite3.Connection): SQLite 데이터베이스 연결 객체
        data_to_update (list of tuples): 업데이트할 데이터 목록. 
                                         각 항목은 (idx, name, ...) 형식.
        opencv_signal (int): OpenCV로부터 전달된 값 (1일 경우 점수 감소).
        
    Returns:
        None
    """
    try:
        cursor = conn.cursor()
        
        if opencv_signal == 1:  # OpenCV에서 1이 수신된 경우
            for row in data_to_update:
                idx, name = row[:2]  # 첫 두 값만 추출
                
                # 현재 점수를 가져옴
                cursor.execute("SELECT score FROM driver WHERE idx = ? AND name = ?", (idx, name))
                result = cursor.fetchone()
                
                if result is None:
                    print(f"Warning: No data found for idx={idx}, name={name}")
                    continue
                
                current_score = result[0]
                new_score = current_score - 1  # 점수 감소

                # 점수 업데이트
                cursor.execute("""
                    UPDATE driver
                    SET score = ?
                    WHERE idx = ? AND name = ?
                """, (new_score, idx, name))
                print(f"Updated idx={idx}, name={name}, score={new_score}")

            # 변경 사항 저장
            conn.commit()
            print("Committing changes...")

        else:
            print("OpenCV signal is not 1. No updates performed.")

    except sqlite3.Error as e:
        print("데이터베이스 오류:", e)

    finally:
        cursor.close()



# 데이터 초기화 함수
def initialize_database():
    """
    데이터베이스를 초기화하고, 기본 데이터를 삽입.
    """
    conn = sqlite3.connect("your_database.db")
    cursor = conn.cursor()

    # 테이블 생성 (없을 경우)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS driver (
            idx INTEGER PRIMARY KEY,      -- 고유 ID
            name TEXT NOT NULL,           -- 이름
            score INTEGER DEFAULT 100,    -- 점수
            vc_num TEXT DEFAULT NULL      -- 차량 번호
        )
    ''')

    # 초기 데이터
    data_to_insert = [
        (1, '이주환', 100, '62라1234'),
        (2, '김상우', 90, '11가5678'),
        (3, '박철수', 85, '33다9999')
    ]

    # 중복 삽입 방지: 이미 존재하는 경우 무시
    for record in data_to_insert:
        cursor.execute('''
            INSERT OR IGNORE INTO driver (idx, name, score, vc_num)
            VALUES (?, ?, ?, ?)
        ''', record)

    # 변경사항 저장
    conn.commit()
    print("Database initialized with default data.")

    # 현재 데이터 확인
    cursor.execute("SELECT * FROM driver")
    rows = cursor.fetchall()
    for row in rows:
        print(f"Existing data: {row}")

    # 연결 종료
    conn.close()


# 데이터 변경 확인 함수
def show_current_data():
    """
    데이터베이스의 현재 데이터를 출력.
    """
    conn = sqlite3.connect("your_database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM driver")
    rows = cursor.fetchall()

    print("Current data in the database:")
    for row in rows:
        print(row)

    conn.close()


# 메인 실행
if __name__ == "__main__":
    # 데이터베이스 초기화 (테이블 생성 및 초기 데이터 삽입)
    initialize_database()

    # 현재 데이터 출력
    show_current_data()
    
c.execute("SELECT * FROM driver")
rows = c.fetchall()  # 모든 데이터를 가져옴

# 데이터 출력
for row in rows:
    print("모든 기사님들의 데이터 출력",row)
    

data_to_update = [
    (1, '이주환', 100, '62라1234'),  # 변경해야하는 기사님 데이터 넣기!
    
]

# OpenCV로부터 전달된 신호 (예: 1)
opencv_signal = 1  # OpenCV에서 수신된 신호

# 함수 호출
update_driver_table_with_opencv(conn, data_to_update, opencv_signal)
    

# 변경사항 저장 및 연결 종료
conn.commit()
conn.close()
